"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Event API
 * API to manage event data for the Event Crowdsource application.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class DefaultApi extends runtime.BaseAPI {
    /**
     * Create a new event
     */
    async createEventRaw(requestParameters, initOverrides) {
        if (requestParameters['eventItem'] == null) {
            throw new runtime.RequiredError('eventItem', 'Required parameter "eventItem" was null or undefined when calling createEvent().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/create-event`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.EventItemToJSON)(requestParameters['eventItem']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventItemFromJSON)(jsonValue));
    }
    /**
     * Create a new event
     */
    async createEvent(requestParameters, initOverrides) {
        const response = await this.createEventRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get a single event by ID
     */
    async getEventByIdRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling getEventById().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventItemFromJSON)(jsonValue));
    }
    /**
     * Get a single event by ID
     */
    async getEventById(requestParameters, initOverrides) {
        const response = await this.getEventByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * List all event summaries
     */
    async listEventSummariesRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/event-summaries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.EventSummaryFromJSON));
    }
    /**
     * List all event summaries
     */
    async listEventSummaries(initOverrides) {
        const response = await this.listEventSummariesRaw(initOverrides);
        return await response.value();
    }
    /**
     * Make a payment
     */
    async makePaymentRaw(requestParameters, initOverrides) {
        if (requestParameters['paymentRequest'] == null) {
            throw new runtime.RequiredError('paymentRequest', 'Required parameter "paymentRequest" was null or undefined when calling makePayment().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/make-payment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.PaymentRequestToJSON)(requestParameters['paymentRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PaymentResponseFromJSON)(jsonValue));
    }
    /**
     * Make a payment
     */
    async makePayment(requestParameters, initOverrides) {
        const response = await this.makePaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.DefaultApi = DefaultApi;
