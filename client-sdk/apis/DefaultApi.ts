/* tslint:disable */
/* eslint-disable */
/**
 * Event API
 * API to manage event data for the Event Crowdsource application.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EventItem,
  EventSummary,
  PaymentRequest,
  PaymentResponse,
} from '../models/index';
import {
    EventItemFromJSON,
    EventItemToJSON,
    EventSummaryFromJSON,
    EventSummaryToJSON,
    PaymentRequestFromJSON,
    PaymentRequestToJSON,
    PaymentResponseFromJSON,
    PaymentResponseToJSON,
} from '../models/index';

export interface CreateEventRequest {
    eventItem: EventItem;
}

export interface GetEventByIdRequest {
    id: string;
}

export interface MakePaymentRequest {
    paymentRequest: PaymentRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create a new event
     */
    async createEventRaw(requestParameters: CreateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventItem>> {
        if (requestParameters['eventItem'] == null) {
            throw new runtime.RequiredError(
                'eventItem',
                'Required parameter "eventItem" was null or undefined when calling createEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/create-event`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventItemToJSON(requestParameters['eventItem']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventItemFromJSON(jsonValue));
    }

    /**
     * Create a new event
     */
    async createEvent(requestParameters: CreateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventItem> {
        const response = await this.createEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single event by ID
     */
    async getEventByIdRaw(requestParameters: GetEventByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventItem>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getEventById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventItemFromJSON(jsonValue));
    }

    /**
     * Get a single event by ID
     */
    async getEventById(requestParameters: GetEventByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventItem> {
        const response = await this.getEventByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all event summaries
     */
    async listEventSummariesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EventSummary>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/event-summaries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventSummaryFromJSON));
    }

    /**
     * List all event summaries
     */
    async listEventSummaries(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EventSummary>> {
        const response = await this.listEventSummariesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Make a payment
     */
    async makePaymentRaw(requestParameters: MakePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentResponse>> {
        if (requestParameters['paymentRequest'] == null) {
            throw new runtime.RequiredError(
                'paymentRequest',
                'Required parameter "paymentRequest" was null or undefined when calling makePayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/make-payment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentRequestToJSON(requestParameters['paymentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentResponseFromJSON(jsonValue));
    }

    /**
     * Make a payment
     */
    async makePayment(requestParameters: MakePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentResponse> {
        const response = await this.makePaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
